import logging
from typing import Optional

from duckduckgo_search import DDGS
from flask import render_template

from app.config.config import Config
from app.services.ai.ai_service_instance import AIServiceSingleton


class BrowserService:
    """
    A service class to handle web searches.
    """

    def __init__(self, api_key: Optional[str] = None):
        if api_key is None:
            api_key = Config.get("SEARCH_API_KEY")
        self.api_key = api_key
        self.config = Config()
        # Set up logging
        self.logger = logging.getLogger(__name__)

    def web_search(self, search: str) -> str:
        """
        The user's non modified search contains the words 'web' or 'internet'

        Args:
            search (str): The non modified search string provided by the user where the search contains the words 'web' or 'internet' specifically.

        Returns:
            str: A comprehensive response generated by web or internet.
        """
        self.logger.info("Performing web search for query: %s", search)
        try:
            ##search = "monkeys and bananas"
            # results = DDGS().text(
            #     search, max_results=5
            # )  # Perform the search with a limit of 5 results
            results = DDGS().text(
                search, max_results=1
            )  # Perform the search with a limit of 5 results
            if not results:
                return "No results found."

            response = "Here are the top search results:\n"
            for i, result in enumerate(results, start=1):
                response += f"{i}. {result['title']}: {result['href']}\n"

            result = results[0]

            response = (
                f"Top result returned is titled: {result['title']}.  {result['body']}"
            )

            prompt = render_template(
                "web_search_overview",
                overview=response,
            )

            ai_service = AIServiceSingleton().get_instance()
            ai_response = ai_service.prompt_the_ai(prompt)

            return ai_response.strip()
        except Exception as e:
            self.logger.error("Error performing web search: %s", e)
            return "An error occurred while performing the web search."
